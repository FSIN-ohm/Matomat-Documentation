{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Mat\u03a9hmat documentation Mat\u03a9hmat is a cash system designed to cell Mate, sweets and other joyful goods :D. Mat\u03a9hmat is created by and for the students of the IT-Fculty of the TH Nuermberg University. It is the successor of the k4cg Matomat and the Fablabl NBG Matomat . Mat\u03a9hmat allows users to register and have an account where they can pay money to. From this account they can then buy what is Provided by the Fachschaft . The design of the system is modern, open, and mostly designed with technologies that IT students of TH Nuermberg are able to understand. This should enable future generations of students to administrate, and extend the system with cool features. Mat\u03a9hmat consists of three major parts, a Server using MySQL to store all Persistent information, and handle Background Jobs. a web based Admin frontend with which is possible to administrate the system. a frontend based on a Raspbery PI which handles the interaction with the users. The Server The core is the Server with which all other parts of Mat\u03a9hmat communicate with through a REST-API based on the JSON protocol. The Server is written in java using the Spring Framework for providing the REST-API, and Hibernate to communicate with the MySQL database. The Admin-Fronted The Admin-Frontend is written HTML, CSS, and TypeScript using the Angular framework. It is a web application that can be delivered by a static web sever like Nginx . All the the persistent data it need it gets form the Mat\u03a9hmat Server . The User-Frontend The User-Frontend is a little wooden box containing a touch display a RaspberryPI, and a RFID scanner. It displays a touch friendly webpage hosted on the device itself. The page comunicates directly with the Mat\u03a9hmat Server through its REST-API. It is created using pure HTML5, CSS and JavaScript.","title":"Mat\u03a9hmat documentation"},{"location":"#mathmat-documentation","text":"Mat\u03a9hmat is a cash system designed to cell Mate, sweets and other joyful goods :D. Mat\u03a9hmat is created by and for the students of the IT-Fculty of the TH Nuermberg University. It is the successor of the k4cg Matomat and the Fablabl NBG Matomat . Mat\u03a9hmat allows users to register and have an account where they can pay money to. From this account they can then buy what is Provided by the Fachschaft . The design of the system is modern, open, and mostly designed with technologies that IT students of TH Nuermberg are able to understand. This should enable future generations of students to administrate, and extend the system with cool features. Mat\u03a9hmat consists of three major parts, a Server using MySQL to store all Persistent information, and handle Background Jobs. a web based Admin frontend with which is possible to administrate the system. a frontend based on a Raspbery PI which handles the interaction with the users.","title":"Mat\u03a9hmat documentation"},{"location":"#the-server","text":"The core is the Server with which all other parts of Mat\u03a9hmat communicate with through a REST-API based on the JSON protocol. The Server is written in java using the Spring Framework for providing the REST-API, and Hibernate to communicate with the MySQL database.","title":"The Server"},{"location":"#the-admin-fronted","text":"The Admin-Frontend is written HTML, CSS, and TypeScript using the Angular framework. It is a web application that can be delivered by a static web sever like Nginx . All the the persistent data it need it gets form the Mat\u03a9hmat Server .","title":"The Admin-Fronted"},{"location":"#the-user-frontend","text":"The User-Frontend is a little wooden box containing a touch display a RaspberryPI, and a RFID scanner. It displays a touch friendly webpage hosted on the device itself. The page comunicates directly with the Mat\u03a9hmat Server through its REST-API. It is created using pure HTML5, CSS and JavaScript.","title":"The User-Frontend"},{"location":"contribute/","text":"Contribute This side will describe how to contribute to the Matohmat project. Feature branching In order to apply changes to a Matohmat repository we use a methode so called feature branching . By means we do not allow commits to be pushed directly to the master branch of any of our repositories. Instead what you would want to do is fork our repository, work on your own fork, and if you are done send a Merge- or Pullrequest . This Merge-/Pullrequest then needs to be tested and code reviewd by another member of the matomat crew.","title":"Contribute"},{"location":"contribute/#contribute","text":"This side will describe how to contribute to the Matohmat project.","title":"Contribute"},{"location":"contribute/#feature-branching","text":"In order to apply changes to a Matohmat repository we use a methode so called feature branching . By means we do not allow commits to be pushed directly to the master branch of any of our repositories. Instead what you would want to do is fork our repository, work on your own fork, and if you are done send a Merge- or Pullrequest . This Merge-/Pullrequest then needs to be tested and code reviewd by another member of the matomat crew.","title":"Feature branching"},{"location":"database/","text":"Database The database is designed using MySql. There are 3 Default users. These users are the first 3 numbers in the user table 1 World User : Every transaction from or to this user is a transaction where money enteres or leaves the system. 2 Matohmat User : Every transaction from or to this user is a transaction where money leaves or enteres the matomat box. This total in this amount should be the money that is stored in Matohmat Pigibank . 3 Root Admin *: This is the first admin that exists. From this account on further admins can be created.","title":"Database"},{"location":"database/#database","text":"The database is designed using MySql. There are 3 Default users. These users are the first 3 numbers in the user table 1 World User : Every transaction from or to this user is a transaction where money enteres or leaves the system. 2 Matohmat User : Every transaction from or to this user is a transaction where money leaves or enteres the matomat box. This total in this amount should be the money that is stored in Matohmat Pigibank . 3 Root Admin *: This is the first admin that exists. From this account on further admins can be created.","title":"Database"},{"location":"documentation/","text":"Documentation The Documentation you are currently reading is written using mkdocs . It is a tool that will generate a static website based on markdown files. Markdown has the advantage that it is simple to read and write, and that there are several tools that can translate a markdown file into languages like html or latex. Installation Mkdos is written in python and is distributed through the python internal package manager pip , thus you need to get python and pip running on your operating system first. Windows Download the latest Python3 . When running the setup program make sure to check Add Python 3.x to PATH . Install python Open powershell or cmd, and type: pip3 install mkdocs . MacOS MacOS already comes with Python already installed, however pip is still missing. The easyest, and most nondistructive way is to install the MacOS package manager homebrew first. The advantage of homebrew are that it will only modify your home directory, but not the root dir. So your OS will not be touched by this. Install homebrew Install Python from homebrew, which will also install pip. Run this command: brew install python Install mkdocs: pip3 install mkdocs Alternativeley, without Homebrew, you can use the depreceated but preinstalled easy_install tool to install pip: Run sudo easy_install pip to install pip Update pip with sudo pip install --upgrade pip Run sudo pip install mkdocs to install mkdocs Linux/*BSD Also Linux/*BSD comes pre installed with python. Most distributions also deliver pip by default. If its not installed you may need to figure out how to install pip3 through the package manager of your system. Install pip3 with these commands according to distributions: Ubuntu/Mint : apt install python3-pip Fedora/CentOS : sudo dnf install python3-pip Arch/Manjaro : sudo pacman -S python-pip openSuse : sudo zypper install python-pip *BSD : You are already advanced enough to know how you can force the bits on your disk to become pip by meditating upon it. Run pip3 install mkdocs to install mkdocs only for the current user, or run sudo pip3 install mkdocs to install mkdocs systemwide. Last one has the higher chance to work properly. Android/ChromeOS This might sound funny, but according to the growing amount of Android tablets with keyboard, and ChromeBooks this might actually be useful. Install the Tremux App from f-droid . Launch Termux and type apt update Install python and git with the command: apt install git python Now install mkdocs with pip install mkdocs . From here on everything will be the same as on Desktop. If you want to edit the files you can (besides vim or emacs which are available through Termux) use your favourite text editor on android. This is possible by opening the files with the Termux integration of the build in android file manager: Update Sometimes mkdocs changes the way how to serve, or the syntax will differ. This is why you should make sure to always run the latest version of mkdocs. To ensure this simply run pip3 install --upgrade mkdocs or sudo pip3 install --upgrade mkdocs if you installed pip system wide on a linux/bsd system. Using mkdocs In order to extend this documentation you have to clone it from its git repository . When you cloned it, you will find a mkdocs.yml file, and a docs directory inside. The yaml file is the config file while in the directory docs the documentation files are stored. here is a guide about how to use mkdocs. Write and Deploy If you are writing a documentation page, and want a live preview of it you can enter the root directory of this documentation project, and then run mkdocs serve this will start the mkdocs internal webserver on port 8000 . So all you have to do is type localhost:8000 into the addressbar of your browser, and here you go. If you modify a file, and save it, mkdocs will reload the page and show you the new content. If you want to deploy the page, so it will be up to date at the github pages simply type mkdocs gh-deploy . However please be aware that this will not push your changes to the master branch of the repository. So you still have to commit and push your changes to the actual git repository of this documentation.","title":"Documentation"},{"location":"documentation/#documentation","text":"The Documentation you are currently reading is written using mkdocs . It is a tool that will generate a static website based on markdown files. Markdown has the advantage that it is simple to read and write, and that there are several tools that can translate a markdown file into languages like html or latex.","title":"Documentation"},{"location":"documentation/#installation","text":"Mkdos is written in python and is distributed through the python internal package manager pip , thus you need to get python and pip running on your operating system first.","title":"Installation"},{"location":"documentation/#windows","text":"Download the latest Python3 . When running the setup program make sure to check Add Python 3.x to PATH . Install python Open powershell or cmd, and type: pip3 install mkdocs .","title":"Windows"},{"location":"documentation/#macos","text":"MacOS already comes with Python already installed, however pip is still missing. The easyest, and most nondistructive way is to install the MacOS package manager homebrew first. The advantage of homebrew are that it will only modify your home directory, but not the root dir. So your OS will not be touched by this. Install homebrew Install Python from homebrew, which will also install pip. Run this command: brew install python Install mkdocs: pip3 install mkdocs Alternativeley, without Homebrew, you can use the depreceated but preinstalled easy_install tool to install pip: Run sudo easy_install pip to install pip Update pip with sudo pip install --upgrade pip Run sudo pip install mkdocs to install mkdocs","title":"MacOS"},{"location":"documentation/#linuxbsd","text":"Also Linux/*BSD comes pre installed with python. Most distributions also deliver pip by default. If its not installed you may need to figure out how to install pip3 through the package manager of your system. Install pip3 with these commands according to distributions: Ubuntu/Mint : apt install python3-pip Fedora/CentOS : sudo dnf install python3-pip Arch/Manjaro : sudo pacman -S python-pip openSuse : sudo zypper install python-pip *BSD : You are already advanced enough to know how you can force the bits on your disk to become pip by meditating upon it. Run pip3 install mkdocs to install mkdocs only for the current user, or run sudo pip3 install mkdocs to install mkdocs systemwide. Last one has the higher chance to work properly.","title":"Linux/*BSD"},{"location":"documentation/#androidchromeos","text":"This might sound funny, but according to the growing amount of Android tablets with keyboard, and ChromeBooks this might actually be useful. Install the Tremux App from f-droid . Launch Termux and type apt update Install python and git with the command: apt install git python Now install mkdocs with pip install mkdocs . From here on everything will be the same as on Desktop. If you want to edit the files you can (besides vim or emacs which are available through Termux) use your favourite text editor on android. This is possible by opening the files with the Termux integration of the build in android file manager:","title":"Android/ChromeOS"},{"location":"documentation/#update","text":"Sometimes mkdocs changes the way how to serve, or the syntax will differ. This is why you should make sure to always run the latest version of mkdocs. To ensure this simply run pip3 install --upgrade mkdocs or sudo pip3 install --upgrade mkdocs if you installed pip system wide on a linux/bsd system.","title":"Update"},{"location":"documentation/#using-mkdocs","text":"In order to extend this documentation you have to clone it from its git repository . When you cloned it, you will find a mkdocs.yml file, and a docs directory inside. The yaml file is the config file while in the directory docs the documentation files are stored. here is a guide about how to use mkdocs.","title":"Using mkdocs"},{"location":"documentation/#write-and-deploy","text":"If you are writing a documentation page, and want a live preview of it you can enter the root directory of this documentation project, and then run mkdocs serve this will start the mkdocs internal webserver on port 8000 . So all you have to do is type localhost:8000 into the addressbar of your browser, and here you go. If you modify a file, and save it, mkdocs will reload the page and show you the new content. If you want to deploy the page, so it will be up to date at the github pages simply type mkdocs gh-deploy . However please be aware that this will not push your changes to the master branch of the repository. So you still have to commit and push your changes to the actual git repository of this documentation.","title":"Write and Deploy"},{"location":"get_started_frontend/","text":"Setting up the development environment The following steps will guide you through the process of setting up the development environment for the admin and user-frontend. Step 1: Installing a suitable source code editor We recommend using Visual Studio Code, it's available for Windows, macOS and Linux. Furthermore does it support JavaScript, TypeScript, Node.js and npm package manager. All four are required. Download Visual Studio Code here Step 2: Installing Node.js Angular requires Node.js version 8.x or 10.x. Check the version you're running: Open your command line interface (CLI), and type node -v If Node.js is not installed download it from here Step 3: Installing the npm (Node Package Manager) Angular, the Angular CLI, and Angular apps depend on features and functionality provided by libraries that are available as npm packages (learn more here ). To download and install npm packages, you need to have such a package manager installed. This Quick Start uses the npm client command line interface, which is installed with Node.js by default. To check that you have the npm client installed, run npm -v in a CLI. Step 4: Installing the Angular CLI The Angular CLI was used to create the Matomat. Find out more about Angular, here To install the CLI using npm, run the following command in your command line interface: Windows: npm install -g @angular/cli MacOS/Linux: sudo npm install -g @angular/cli","title":"Get started frontend"},{"location":"get_started_frontend/#setting-up-the-development-environment","text":"The following steps will guide you through the process of setting up the development environment for the admin and user-frontend.","title":"Setting up the development environment"},{"location":"get_started_frontend/#step-1-installing-a-suitable-source-code-editor","text":"We recommend using Visual Studio Code, it's available for Windows, macOS and Linux. Furthermore does it support JavaScript, TypeScript, Node.js and npm package manager. All four are required. Download Visual Studio Code here","title":"Step 1: Installing a suitable source code editor"},{"location":"get_started_frontend/#step-2-installing-nodejs","text":"Angular requires Node.js version 8.x or 10.x. Check the version you're running: Open your command line interface (CLI), and type node -v If Node.js is not installed download it from here","title":"Step 2: Installing Node.js"},{"location":"get_started_frontend/#step-3-installing-the-npm-node-package-manager","text":"Angular, the Angular CLI, and Angular apps depend on features and functionality provided by libraries that are available as npm packages (learn more here ). To download and install npm packages, you need to have such a package manager installed. This Quick Start uses the npm client command line interface, which is installed with Node.js by default. To check that you have the npm client installed, run npm -v in a CLI.","title":"Step 3: Installing the npm (Node Package Manager)"},{"location":"get_started_frontend/#step-4-installing-the-angular-cli","text":"The Angular CLI was used to create the Matomat. Find out more about Angular, here To install the CLI using npm, run the following command in your command line interface:","title":"Step 4: Installing the Angular CLI"},{"location":"get_started_frontend/#windows-npm-install-g-angularcli","text":"","title":"Windows: npm install -g @angular/cli"},{"location":"get_started_frontend/#macoslinux-sudo-npm-install-g-angularcli","text":"","title":"MacOS/Linux: sudo npm install -g @angular/cli"},{"location":"mockup_server/","text":"Mockup Server The mockup server is used for developing the REST request of the clients without having to utilize the actual server. This is used for the time the actual server does not have full functionality yet, or when the full server is not needed. The mockup server has no logic embodied, on POST, DELETE and PATCH methods it will always respond with a success even if the body of the request was malformed or wrong. For GET however it will return static JSON files which have been written for test cases. Setup The Mockup Server itself is written in Python using flask . For setting up Python on your OS please see the according section of the Documentation which describes how to use Python for mkdocs. When you installed python you may want to pull the Matohmat server repository . Here enter the mockup directory. You will find the mockup_server.py file in here. Execute this file with Python. Usage You can use Postman to do test requests against the server (this works for mockup server as well as the actuall server).","title":"Mockup server"},{"location":"mockup_server/#mockup-server","text":"The mockup server is used for developing the REST request of the clients without having to utilize the actual server. This is used for the time the actual server does not have full functionality yet, or when the full server is not needed. The mockup server has no logic embodied, on POST, DELETE and PATCH methods it will always respond with a success even if the body of the request was malformed or wrong. For GET however it will return static JSON files which have been written for test cases.","title":"Mockup Server"},{"location":"mockup_server/#setup","text":"The Mockup Server itself is written in Python using flask . For setting up Python on your OS please see the according section of the Documentation which describes how to use Python for mkdocs. When you installed python you may want to pull the Matohmat server repository . Here enter the mockup directory. You will find the mockup_server.py file in here. Execute this file with Python.","title":"Setup"},{"location":"mockup_server/#usage","text":"You can use Postman to do test requests against the server (this works for mockup server as well as the actuall server).","title":"Usage"},{"location":"rest_api/","text":"REST API All parts of Matohmat communicate through a common JSON based REST API. Here is the documentation of it, its ment for the ones who wants to program a client, or change the server. The rest api on the server side is implemented using the spring rest . Here is a tutorial about how to write RESTful Apps with spring. Admin Endpoint: /admins Query all admins GET /v1/admins This request requires Admin privileges. count=<number> number of items per page. If this parameter is not given it will return all admins in one request. page=<number> only works in combination with the items parameter. If not given, the first page will be returned. Reply [ { \"id\":<admin id as long>, \"user_id\":<user id as long>, \"balance\":<balance in cent as integer>, \"last_seen\":<last login date as string>, \"available\":<is user available as boolean>, \"user_name\":<admin username>, \"email\":<email address> }, <furhter admins> ] Query one specific admin GET /v1/admins/<admin_id> This request requires Admin privileges. Reply { \"id\":<admin id as long>, \"user_id\":<user id as long>, \"balance\":<balance in cent as integer>, \"last_seen\":<last login date as string>, \"available\":<is user available as boolean>, \"user_name\":<admin username>, \"email\":<email address> } Query the loged in admin GET /v1/admins/me This request requires Admin privileges. It will return the user represented by the basic auth credentials. Reply { \"id\":<admin id as long>, \"user_id\":<user id as long>, \"balance\":<balance in cent as integer>, \"last_seen\":<last login date as string>, \"available\":<is user available as boolean>, \"user_name\":<admin username>, \"email\":<email address> } Create a new admin This request requires Admin privileges. Every existing admin can create new admins. POST /v1/admins Request { \"user_name\":<admin username>, \"password\":<admin password>, \"email\":<email address> } Change an admin PATCH /admins/<admin id> This request requires Admin privileges. Request { \"user_name\":<admin username>, \"password\":<admin password>, \"email\":<email address> } Delete an admin DELETE /v1/admins/<admin id> This request requires Admin privileges. User Endpoint: /users Query all users GET /v1/users This request requires Admin privileges. count=<number> number of items per page. If this parameter is not given it will return all users in one request. page=<number> only works in combination with the items parameter. If not given, the first page will be returned. Reply [ { \"id\":<user id as long>, \"balance\":<balance in cent as integer>, \"last_seen\":<last login date as string>, \"available\":<is user available as boolean>, \"name\":<name of the user> }, <more users> ] Query one specific user GET /v1/users/<user_id> This request requires Admin privileges. Reply { \"id\":<user id as long>, \"balance\":<balance in cent as integer>, \"last_seen\":<last login date as string>, \"available\":<is user available as boolean>, \"name\":<name of the user> } Query the current loged in user GET /v1/users/me This will require a user to send a basic auth header with his credentials. It will return the user represented by the basic auth credentials. Reply { \"id\":<user id as long>, \"balance\":<balance in cent as integer>, \"last_seen\":<last login date as string>, \"available\":<is user available as boolean> } Create new user POST /v1/user A create new user may be sent without auth header, however if no basic auth header is given it requires that the request contains a valid client key. These keys are used to permit privileged clients to create new users. If an admin auth header is given the client_key can be empty or left out, and should not even be used here. Regular users are not permitted to register new users. Only admins or priviliged clients. The name of the user will be auto generated. The body of the post must contain this data: { \"client_key\":<key of the client priviliged to create new users. Can be left out if adbmin basic auth is given>, \"auth_hash\":<first 25 bytes of the auth hash (sha256) generated from the user id> } Example: { \"client_key\":\"09d374ebf788ca96d5c5ad8cfc778317d8efa692766accc609eb5932ccf19c94\", \"auth_hash\":\"6d78392a5886177fe5b86e585\" } Update a user PATCH /v1/user/<user_id> I can not setup a user name through a create since the matomat does not support it (if it does later, you may sent a PATCH) directly after you created a user. The unique name of a user is ment to be used for a potional smarthphone app where I would be able to send money to other users without having to know their id. The body of the post must contain this data: { \"auth_hash\":<first 25 bytes of the auth hash (sha256) generated from the user id>, \"name\":<the unique user name> } Example: { \"client_key\":\"09d374ebf788ca96d5c5ad8cfc778317d8efa692766accc609eb5932ccf19c94\", \"auth_hash\":\"HansPeter\" } Delete an user DELETE /v1/users/<admin id> This request requires Admin privileges. Product Endpoint: /products Query all products GET /v1/products count=<number> number of items per page. If this parameter is not given it will return all products in one request. page=<number> only works in combination with the items parameter. If not given, the first page will be returned. onlyAvailable=<true/false> if true will only return products that are available. If false or not given it will return all products in database. Reply [ { \"id\":<product id as long>, \"name\":<product name as string>, \"price\":<product price in cent as ing>, \"thumbnail\":<url of image thumbnail as string>, \"reorder_point\":<reorder point as int>, \"barcode\":<barcode of the product as string>, \"is_available\":<is available as boolean>, \"items_per_crate\":<items or bottles per crate> }, <more products> } Query for specific product GET /v1/products/<product_id> Reply { \"id\":<product id as long>, \"name\":<product name as string>, \"price\":<product price in cent as ing>, \"thumbnail\":<url of image thumbnail as string>, \"reorder_point\":<reorder point as int>, \"barcode\":<barcode of the product as string>, \"is_available\":<is available as boolean>, \"items_per_crate\":<items or bottles per crate> } Add product POST /v1/products This request requires Admin privileges. Request { \"name\":<product name as string>, \"price\":<product price in cent as long>, \"thumbnail\":<url of image thumbnail as string>, \"reorder_point\":<reorder point as int>, \"barcode\":<barcode of the product as string>, \"items_per_crate\":<items or bottles per crate> } Update product PATCH /v1/products/<product id> This request requires Admin privileges. This is ment for changing the values of already existing products. Request { \"name\":<product name as string>, \"price\":<product price in cent as long>, \"thumbnail\":<url of image thumbnail as string>, \"reorder_point\":<reorder point as int>, \"barcode\":<barcode of the product as string>, \"items_per_crate\":<items or bottles per crate> } Delete a product DELETE /v1/products/<product id> This request requires Admin privileges. Transaction Endpoint: /transactions There are 6 different types of transactions if a type is requested or given it can only be one of these values: purchse/deposit/withdraw/transfer/order/all . Query transactions GET /v1/transactions If this request is made by a regular user it will only display the transactions of the current user. If a transaction is of type order or purchase it will also contain an attribute products which will be a list of products that where ordered or soled. An order is a special kind of purchase, where there is not only an amount , by means the value of the sum of the price of all products, but also a buy_cost , which is the price we paied at the marched for the products. So the amount will be the price for which we sell the products, and buy_cost will be the price we buy them with. The difference between buy_cost and amount will then be our income . count=<number> number of items per page. If this parameter is not given it will return 100 items of the first page. page=<number> only works in combination with the items parameter. If not given, the first page will be returned. user=<user_id> get all transactions of the given user. Atention this requires admin privileges. made. type=<purchse/deposit/withdraw/transfer/order/all> this will only show the transactions of a specific type. If left out or set to all it will show all the Reply [ { \"id\":<transaction id as long>, \"date\":<transaction date as string>, \"sender\":<user id of the sender as long>, \"receiver\":<user id of the receiver as long>, \"amount\":<amount of money transfered in cent as long>, \"transaction_type\":\"<type of the transaction as string> }, { \"id\":<transaction id as long>, \"date\":<transaction date as string>, \"sender\":<user id of the sender as long>, \"receiver\":<user id of the receiver as long>, \"amount\":<amount of money transfered in cent as long>, \"transaction_type\":\"purchase\" \"products\": [ <product id>, <produtc id>, <etc> ] }, { \"id\":<transaction id as long>, \"date\":<transaction date as string>, \"sender\":<user id of the sender as long>, \"receiver\":<user id of the receiver as long>, \"amount\":<amount of money transfered in cent as long>, \"buy_cost\":<amount of money the order cost at the merchand in cent as long>, \"transaction_type\":\"order\", \"products\": [ <product id>, <produtc id>, <etc> ] }, <more transactions> ] Query one specific transaction CAUTION this may only return transactions of the current user (if not admin). Return a 404 if the transaction exists but does not belong the the user currently logged GET /v1/transactions/<transaction id> Reply { \"id\":<transaction id as long>, \"date\":<transaction date as string>, \"sender\":<user id of the sender as long>, \"receiver\":<user id of the receiver as long>, \"amount\":<amount of money transfered in cent as long>, \"transaction_type\":<type of the transaction as string> } Make new transfer If you want to make a transfer, a user can not change the sender this a sender does not have to be given for a user. However only admins can change both sender and receiver. Also a user may not send money to himself. POST /v1/transactions/transfer Request for admins { \"sender\": <id of the sender>, \"receiver\": <id of the receiver>, \"amount\": <amount of money transfered in cent as long> } Request for users { \"receiver\": <id or name of the receiver>, \"amount\": <amount of money transfered in cent as long> } Make new deposit transaction POST /v1/transactions/deposit This will add money the the account of the currently logged in user. Request { \"amount\":<amount of money in cent as long> } Make new withdrawal transaction POST /transactions/withdrawl This can only be done by admins. Andmins can only take money from themselves, if they want to take money from other users they first have to transferee it to themselves. Request { \"amount\":<amount of money in cent as long> } Make new order transaction POST /v1/transactions/order This can only be done by admins. Request { \"buy_cost\":<amount of money the order cost in cent as long>, \"orders\": [ { \"product\": <product id>, \"amount\": <count of this product ordered> }, <more products added by this order> ] } Make new purchase transaction POST /v1/transactions/purchases Request { \"orders\": [ { \"product\": <product id>, \"amount\": <count of this product ordered> }, <more products added by this order> ] } Authentication The authentication on Matohmat is done through Basic Auth . However it depends if you want to make a Admin login or just a regular user login. The basic auth header for an admin is simply Authorization: Basic base64(<admin_name>:<admin_password>) . So as an example the user test and the password passwd would generate this header: Authorization: Basic dGVzdDpwYXNzd2Q= . The auth header for a regular user is the base64 encoded double dot followed by the sha1 hash of the id entered by the user (mostlikely the RFID of the Ohmcard): Authorization: Basic base64(:sha1hash(<user_id>)) So if a user has the \"id\": 123456789 this will undergo these steps: sha1sum(123456789) = 98O8HYCOBHMq32eZZczDTKeuNEE= Build auth string: :98O8HYCOBHMq32eZZczDTKeuNEE= base64(:98O8HYCOBHMq32eZZczDTKeuNEE=) = Ojk4TzhIWUNPQkhNcTMyZVpaY3pEVEtldU5FRT0K Build auth header: Authorization: Basic Ojk4TzhIWUNPQkhNcTMyZVpaY3pEVEtldU5FRT0K Error handlying First of all a HTTP code will be returned by every request. This is the codes used by this api, and what they mean: Success codes: 200 when send a query and the answer was sent 201 when a new entry was created through a POST 202 when a change was successfully done through a PATCH 200 when an entry was successfully removed through a DELETE Failure codes: 400 the request was malformed 401 when something was requested but the login was wrong 404 If an entry is not found after a query was send. Error codes: 500 Server errored All the error codes beside the success code 200 will also return a JSON containing an error message which can be displayed by the client: { \"error_message\":\"<this is an error message>\" }","title":"Rest api"},{"location":"rest_api/#rest-api","text":"All parts of Matohmat communicate through a common JSON based REST API. Here is the documentation of it, its ment for the ones who wants to program a client, or change the server. The rest api on the server side is implemented using the spring rest . Here is a tutorial about how to write RESTful Apps with spring.","title":"REST API"},{"location":"rest_api/#admin","text":"Endpoint: /admins","title":"Admin"},{"location":"rest_api/#query-all-admins","text":"GET /v1/admins This request requires Admin privileges. count=<number> number of items per page. If this parameter is not given it will return all admins in one request. page=<number> only works in combination with the items parameter. If not given, the first page will be returned. Reply [ { \"id\":<admin id as long>, \"user_id\":<user id as long>, \"balance\":<balance in cent as integer>, \"last_seen\":<last login date as string>, \"available\":<is user available as boolean>, \"user_name\":<admin username>, \"email\":<email address> }, <furhter admins> ]","title":"Query all admins"},{"location":"rest_api/#query-one-specific-admin","text":"GET /v1/admins/<admin_id> This request requires Admin privileges. Reply { \"id\":<admin id as long>, \"user_id\":<user id as long>, \"balance\":<balance in cent as integer>, \"last_seen\":<last login date as string>, \"available\":<is user available as boolean>, \"user_name\":<admin username>, \"email\":<email address> }","title":"Query one specific admin"},{"location":"rest_api/#query-the-loged-in-admin","text":"GET /v1/admins/me This request requires Admin privileges. It will return the user represented by the basic auth credentials. Reply { \"id\":<admin id as long>, \"user_id\":<user id as long>, \"balance\":<balance in cent as integer>, \"last_seen\":<last login date as string>, \"available\":<is user available as boolean>, \"user_name\":<admin username>, \"email\":<email address> }","title":"Query the loged in admin"},{"location":"rest_api/#create-a-new-admin","text":"This request requires Admin privileges. Every existing admin can create new admins. POST /v1/admins Request { \"user_name\":<admin username>, \"password\":<admin password>, \"email\":<email address> }","title":"Create a new admin"},{"location":"rest_api/#change-an-admin","text":"PATCH /admins/<admin id> This request requires Admin privileges. Request { \"user_name\":<admin username>, \"password\":<admin password>, \"email\":<email address> }","title":"Change an admin"},{"location":"rest_api/#delete-an-admin","text":"DELETE /v1/admins/<admin id> This request requires Admin privileges.","title":"Delete an admin"},{"location":"rest_api/#user","text":"Endpoint: /users","title":"User"},{"location":"rest_api/#query-all-users","text":"GET /v1/users This request requires Admin privileges. count=<number> number of items per page. If this parameter is not given it will return all users in one request. page=<number> only works in combination with the items parameter. If not given, the first page will be returned. Reply [ { \"id\":<user id as long>, \"balance\":<balance in cent as integer>, \"last_seen\":<last login date as string>, \"available\":<is user available as boolean>, \"name\":<name of the user> }, <more users> ]","title":"Query all users"},{"location":"rest_api/#query-one-specific-user","text":"GET /v1/users/<user_id> This request requires Admin privileges. Reply { \"id\":<user id as long>, \"balance\":<balance in cent as integer>, \"last_seen\":<last login date as string>, \"available\":<is user available as boolean>, \"name\":<name of the user> }","title":"Query one specific user"},{"location":"rest_api/#query-the-current-loged-in-user","text":"GET /v1/users/me This will require a user to send a basic auth header with his credentials. It will return the user represented by the basic auth credentials. Reply { \"id\":<user id as long>, \"balance\":<balance in cent as integer>, \"last_seen\":<last login date as string>, \"available\":<is user available as boolean> }","title":"Query the current loged in user"},{"location":"rest_api/#create-new-user","text":"POST /v1/user A create new user may be sent without auth header, however if no basic auth header is given it requires that the request contains a valid client key. These keys are used to permit privileged clients to create new users. If an admin auth header is given the client_key can be empty or left out, and should not even be used here. Regular users are not permitted to register new users. Only admins or priviliged clients. The name of the user will be auto generated. The body of the post must contain this data: { \"client_key\":<key of the client priviliged to create new users. Can be left out if adbmin basic auth is given>, \"auth_hash\":<first 25 bytes of the auth hash (sha256) generated from the user id> } Example: { \"client_key\":\"09d374ebf788ca96d5c5ad8cfc778317d8efa692766accc609eb5932ccf19c94\", \"auth_hash\":\"6d78392a5886177fe5b86e585\" }","title":"Create new user"},{"location":"rest_api/#update-a-user","text":"PATCH /v1/user/<user_id> I can not setup a user name through a create since the matomat does not support it (if it does later, you may sent a PATCH) directly after you created a user. The unique name of a user is ment to be used for a potional smarthphone app where I would be able to send money to other users without having to know their id. The body of the post must contain this data: { \"auth_hash\":<first 25 bytes of the auth hash (sha256) generated from the user id>, \"name\":<the unique user name> } Example: { \"client_key\":\"09d374ebf788ca96d5c5ad8cfc778317d8efa692766accc609eb5932ccf19c94\", \"auth_hash\":\"HansPeter\" }","title":"Update a user"},{"location":"rest_api/#delete-an-user","text":"DELETE /v1/users/<admin id> This request requires Admin privileges.","title":"Delete an user"},{"location":"rest_api/#product","text":"Endpoint: /products","title":"Product"},{"location":"rest_api/#query-all-products","text":"GET /v1/products count=<number> number of items per page. If this parameter is not given it will return all products in one request. page=<number> only works in combination with the items parameter. If not given, the first page will be returned. onlyAvailable=<true/false> if true will only return products that are available. If false or not given it will return all products in database. Reply [ { \"id\":<product id as long>, \"name\":<product name as string>, \"price\":<product price in cent as ing>, \"thumbnail\":<url of image thumbnail as string>, \"reorder_point\":<reorder point as int>, \"barcode\":<barcode of the product as string>, \"is_available\":<is available as boolean>, \"items_per_crate\":<items or bottles per crate> }, <more products> }","title":"Query all products"},{"location":"rest_api/#query-for-specific-product","text":"GET /v1/products/<product_id> Reply { \"id\":<product id as long>, \"name\":<product name as string>, \"price\":<product price in cent as ing>, \"thumbnail\":<url of image thumbnail as string>, \"reorder_point\":<reorder point as int>, \"barcode\":<barcode of the product as string>, \"is_available\":<is available as boolean>, \"items_per_crate\":<items or bottles per crate> }","title":"Query for specific product"},{"location":"rest_api/#add-product","text":"POST /v1/products This request requires Admin privileges. Request { \"name\":<product name as string>, \"price\":<product price in cent as long>, \"thumbnail\":<url of image thumbnail as string>, \"reorder_point\":<reorder point as int>, \"barcode\":<barcode of the product as string>, \"items_per_crate\":<items or bottles per crate> }","title":"Add product"},{"location":"rest_api/#update-product","text":"PATCH /v1/products/<product id> This request requires Admin privileges. This is ment for changing the values of already existing products. Request { \"name\":<product name as string>, \"price\":<product price in cent as long>, \"thumbnail\":<url of image thumbnail as string>, \"reorder_point\":<reorder point as int>, \"barcode\":<barcode of the product as string>, \"items_per_crate\":<items or bottles per crate> }","title":"Update product"},{"location":"rest_api/#delete-a-product","text":"DELETE /v1/products/<product id> This request requires Admin privileges.","title":"Delete a product"},{"location":"rest_api/#transaction","text":"Endpoint: /transactions There are 6 different types of transactions if a type is requested or given it can only be one of these values: purchse/deposit/withdraw/transfer/order/all .","title":"Transaction"},{"location":"rest_api/#query-transactions","text":"GET /v1/transactions If this request is made by a regular user it will only display the transactions of the current user. If a transaction is of type order or purchase it will also contain an attribute products which will be a list of products that where ordered or soled. An order is a special kind of purchase, where there is not only an amount , by means the value of the sum of the price of all products, but also a buy_cost , which is the price we paied at the marched for the products. So the amount will be the price for which we sell the products, and buy_cost will be the price we buy them with. The difference between buy_cost and amount will then be our income . count=<number> number of items per page. If this parameter is not given it will return 100 items of the first page. page=<number> only works in combination with the items parameter. If not given, the first page will be returned. user=<user_id> get all transactions of the given user. Atention this requires admin privileges. made. type=<purchse/deposit/withdraw/transfer/order/all> this will only show the transactions of a specific type. If left out or set to all it will show all the Reply [ { \"id\":<transaction id as long>, \"date\":<transaction date as string>, \"sender\":<user id of the sender as long>, \"receiver\":<user id of the receiver as long>, \"amount\":<amount of money transfered in cent as long>, \"transaction_type\":\"<type of the transaction as string> }, { \"id\":<transaction id as long>, \"date\":<transaction date as string>, \"sender\":<user id of the sender as long>, \"receiver\":<user id of the receiver as long>, \"amount\":<amount of money transfered in cent as long>, \"transaction_type\":\"purchase\" \"products\": [ <product id>, <produtc id>, <etc> ] }, { \"id\":<transaction id as long>, \"date\":<transaction date as string>, \"sender\":<user id of the sender as long>, \"receiver\":<user id of the receiver as long>, \"amount\":<amount of money transfered in cent as long>, \"buy_cost\":<amount of money the order cost at the merchand in cent as long>, \"transaction_type\":\"order\", \"products\": [ <product id>, <produtc id>, <etc> ] }, <more transactions> ]","title":"Query transactions"},{"location":"rest_api/#query-one-specific-transaction","text":"CAUTION this may only return transactions of the current user (if not admin). Return a 404 if the transaction exists but does not belong the the user currently logged GET /v1/transactions/<transaction id> Reply { \"id\":<transaction id as long>, \"date\":<transaction date as string>, \"sender\":<user id of the sender as long>, \"receiver\":<user id of the receiver as long>, \"amount\":<amount of money transfered in cent as long>, \"transaction_type\":<type of the transaction as string> }","title":"Query one specific transaction"},{"location":"rest_api/#make-new-transfer","text":"If you want to make a transfer, a user can not change the sender this a sender does not have to be given for a user. However only admins can change both sender and receiver. Also a user may not send money to himself. POST /v1/transactions/transfer Request for admins { \"sender\": <id of the sender>, \"receiver\": <id of the receiver>, \"amount\": <amount of money transfered in cent as long> } Request for users { \"receiver\": <id or name of the receiver>, \"amount\": <amount of money transfered in cent as long> }","title":"Make new transfer"},{"location":"rest_api/#make-new-deposit-transaction","text":"POST /v1/transactions/deposit This will add money the the account of the currently logged in user. Request { \"amount\":<amount of money in cent as long> }","title":"Make new deposit transaction"},{"location":"rest_api/#make-new-withdrawal-transaction","text":"POST /transactions/withdrawl This can only be done by admins. Andmins can only take money from themselves, if they want to take money from other users they first have to transferee it to themselves. Request { \"amount\":<amount of money in cent as long> }","title":"Make new withdrawal transaction"},{"location":"rest_api/#make-new-order-transaction","text":"POST /v1/transactions/order This can only be done by admins. Request { \"buy_cost\":<amount of money the order cost in cent as long>, \"orders\": [ { \"product\": <product id>, \"amount\": <count of this product ordered> }, <more products added by this order> ] }","title":"Make new order transaction"},{"location":"rest_api/#make-new-purchase-transaction","text":"POST /v1/transactions/purchases Request { \"orders\": [ { \"product\": <product id>, \"amount\": <count of this product ordered> }, <more products added by this order> ] }","title":"Make new purchase transaction"},{"location":"rest_api/#authentication","text":"The authentication on Matohmat is done through Basic Auth . However it depends if you want to make a Admin login or just a regular user login. The basic auth header for an admin is simply Authorization: Basic base64(<admin_name>:<admin_password>) . So as an example the user test and the password passwd would generate this header: Authorization: Basic dGVzdDpwYXNzd2Q= . The auth header for a regular user is the base64 encoded double dot followed by the sha1 hash of the id entered by the user (mostlikely the RFID of the Ohmcard): Authorization: Basic base64(:sha1hash(<user_id>)) So if a user has the \"id\": 123456789 this will undergo these steps: sha1sum(123456789) = 98O8HYCOBHMq32eZZczDTKeuNEE= Build auth string: :98O8HYCOBHMq32eZZczDTKeuNEE= base64(:98O8HYCOBHMq32eZZczDTKeuNEE=) = Ojk4TzhIWUNPQkhNcTMyZVpaY3pEVEtldU5FRT0K Build auth header: Authorization: Basic Ojk4TzhIWUNPQkhNcTMyZVpaY3pEVEtldU5FRT0K","title":"Authentication"},{"location":"rest_api/#error-handlying","text":"First of all a HTTP code will be returned by every request. This is the codes used by this api, and what they mean: Success codes: 200 when send a query and the answer was sent 201 when a new entry was created through a POST 202 when a change was successfully done through a PATCH 200 when an entry was successfully removed through a DELETE Failure codes: 400 the request was malformed 401 when something was requested but the login was wrong 404 If an entry is not found after a query was send. Error codes: 500 Server errored All the error codes beside the success code 200 will also return a JSON containing an error message which can be displayed by the client: { \"error_message\":\"<this is an error message>\" }","title":"Error handlying"}]}