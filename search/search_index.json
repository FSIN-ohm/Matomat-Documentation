{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Mat\u03a9hmat documentation Mat\u03a9hmat is a cash system designed to cell Mate, sweets and other joyful goods :D. Mat\u03a9hmat is created by and for the students of the IT-Fculty of the TH Nuermberg University. It is the successor of the k4cg Matomat and the Fablabl NBG Matomat . Mat\u03a9hmat allows users to register and have an account where they can pay money to. From this account they can then buy what is Provided by the Fachschaft . The design of the system is modern, open, and mostly designed with technologies that IT students of TH Nuermberg are able to understand. This should enable future generations of students to administrate, and extend the system with cool features. Mat\u03a9hmat consists of three major parts, a Server using MySQL to store all Persistent information, and handle Background Jobs. a web based Admin frontend with which is possible to administrate the system. a frontend based on a Raspbery PI which handles the interaction with the users. The Server The core is the Server with which all other parts of Mat\u03a9hmat communicate with through a REST-API based on the JSON protocol. The Server is written in java using the Spring Framework for providing the REST-API, and Hibernate to communicate with the MySQL database. The Admin-Fronted The Admin-Frontend is written HTML, CSS, and TypeScript using the Angular framework. It is a web application that can be delivered by a static web sever like Nginx . All the the persistent data it need it gets form the Mat\u03a9hmat Server . The User-Frontend The User-Frontend is a little wooden box containing a touch display a RaspberryPI, and a RFID scanner. It displays a touch friendly webpage hosted on the device itself. The page comunicates directly with the Mat\u03a9hmat Server through its REST-API. It is created using pure HTML5, CSS and JavaScript.","title":"Mat\u03a9hmat documentation"},{"location":"#mathmat-documentation","text":"Mat\u03a9hmat is a cash system designed to cell Mate, sweets and other joyful goods :D. Mat\u03a9hmat is created by and for the students of the IT-Fculty of the TH Nuermberg University. It is the successor of the k4cg Matomat and the Fablabl NBG Matomat . Mat\u03a9hmat allows users to register and have an account where they can pay money to. From this account they can then buy what is Provided by the Fachschaft . The design of the system is modern, open, and mostly designed with technologies that IT students of TH Nuermberg are able to understand. This should enable future generations of students to administrate, and extend the system with cool features. Mat\u03a9hmat consists of three major parts, a Server using MySQL to store all Persistent information, and handle Background Jobs. a web based Admin frontend with which is possible to administrate the system. a frontend based on a Raspbery PI which handles the interaction with the users.","title":"Mat\u03a9hmat documentation"},{"location":"#the-server","text":"The core is the Server with which all other parts of Mat\u03a9hmat communicate with through a REST-API based on the JSON protocol. The Server is written in java using the Spring Framework for providing the REST-API, and Hibernate to communicate with the MySQL database.","title":"The Server"},{"location":"#the-admin-fronted","text":"The Admin-Frontend is written HTML, CSS, and TypeScript using the Angular framework. It is a web application that can be delivered by a static web sever like Nginx . All the the persistent data it need it gets form the Mat\u03a9hmat Server .","title":"The Admin-Fronted"},{"location":"#the-user-frontend","text":"The User-Frontend is a little wooden box containing a touch display a RaspberryPI, and a RFID scanner. It displays a touch friendly webpage hosted on the device itself. The page comunicates directly with the Mat\u03a9hmat Server through its REST-API. It is created using pure HTML5, CSS and JavaScript.","title":"The User-Frontend"},{"location":"contribute/","text":"Contribute This side will describe how to contribute to the Matohmat project. Feature branching In order to apply changes to a Matohmat repository we use a methode so called feature branching . By means we do not allow commits to be pushed directly to the master branch of any of our repositories. Instead what you would want to do is fork our repository, work on your own fork, and if you are done send a Merge- or Pullrequest . This Merge-/Pullrequest then needs to be tested and code reviewd by another member of the matomat crew.","title":"Contribute"},{"location":"contribute/#contribute","text":"This side will describe how to contribute to the Matohmat project.","title":"Contribute"},{"location":"contribute/#feature-branching","text":"In order to apply changes to a Matohmat repository we use a methode so called feature branching . By means we do not allow commits to be pushed directly to the master branch of any of our repositories. Instead what you would want to do is fork our repository, work on your own fork, and if you are done send a Merge- or Pullrequest . This Merge-/Pullrequest then needs to be tested and code reviewd by another member of the matomat crew.","title":"Feature branching"},{"location":"documentation/","text":"Documentation The Documentation you are currently reading is written using mkdocs . It is a tool that will generate a static website based on files writting in markdown . Markdown has the advantage that it is simple to read and write, and that there are several tools that can translate a markdown file into languages like html or latex. Installation Mkdos is written in python and is distributed through the python internal package manager pip , thus you need to get python and pip running on your operating system first. Windows Download the latest Python3 . When running the setup program make sure to check Add Python 3.x to PATH . Install python Open powershell or cmd, and type: pip3 install mkdocs . MacOS MacOS already comes with Python already installed, however pip is still missing. The easyest, and most nondistructive way is to install the MacOS package manager homebrew first. The advantage of homebrew are that it will only modify your home directory, but not the root dir. So your OS will not be touched by this. Install homebrew Install Python from homebrew, which will also install pip. Run this command: brew install python Install mkdocs: pip3 install mkdocs Alternativeley, without Homebrew, you can use the depreceated but preinstalled easy_install tool to install pip: Run sudo easy_install pip to install pip Update pip with sudo pip install --upgrade pip Run sudo pip install mkdocs to install mkdocs Linux/*BSD Also Linux/*BSD comes pre installed with python. Most distributions also deliver pip by default. If its not installed you may need to figure out how to install pip3 through the package manager of your system. Install pip3 with these commands according to distributions: Ubuntu/Mint : apt install python3-pip Fedora/CentOS : sudo dnf install python3-pip Arch/Manjaro : sudo pacman -S python-pip openSuse : sudo zypper install python-pip *BSD : You are already advanced enough to know how you can force the bits on your disk to become pip by meditating upon it. Run pip3 install mkdocs to install mkdocs only for the current user, or run sudo pip3 install mkdocs to install mkdocs systemwide. Last one has the higher chance to work properly. Update Sometimes mkdocs changes the way how to serve, or the syntax will differ. This is why you should make sure to always run the latest version of mkdocs. To ensure this simply run pip3 install --upgrade mkdocs or sudo pip3 install --upgrade mkdocs if you installed pip system wide on a linux/bsd system. Using mkdocs In order to extend this documentation you have to clone it from its git repository . When you cloned it, you will find a mkdocs.yml file, and a docs directory inside. The yaml file is the config file while in the directory docs the documentation files are stored. here is a guide about how to use mkdocs. Write and Deploy If you are writing a documentation page, and want a live preview of it you can enter the root directory of this documentation project, and then run mkdocs serve this will start the mkdocs internal webserver on port 8000 . So all you have to do is type localhost:8000 into the addressbar of your browser, and here you go. If you modify a file, and save it, mkdocs will reload the page and show you the new content. If you want to deploy the page, so it will be up to date at the github pages simply type mkdocs gh-deploy . However please be aware that this will not push your changes to the master branch of the repository. So you still have to commit and push your changes to the actual git repository of this documentation.","title":"Documentation"},{"location":"documentation/#documentation","text":"The Documentation you are currently reading is written using mkdocs . It is a tool that will generate a static website based on files writting in markdown . Markdown has the advantage that it is simple to read and write, and that there are several tools that can translate a markdown file into languages like html or latex.","title":"Documentation"},{"location":"documentation/#installation","text":"Mkdos is written in python and is distributed through the python internal package manager pip , thus you need to get python and pip running on your operating system first.","title":"Installation"},{"location":"documentation/#windows","text":"Download the latest Python3 . When running the setup program make sure to check Add Python 3.x to PATH . Install python Open powershell or cmd, and type: pip3 install mkdocs .","title":"Windows"},{"location":"documentation/#macos","text":"MacOS already comes with Python already installed, however pip is still missing. The easyest, and most nondistructive way is to install the MacOS package manager homebrew first. The advantage of homebrew are that it will only modify your home directory, but not the root dir. So your OS will not be touched by this. Install homebrew Install Python from homebrew, which will also install pip. Run this command: brew install python Install mkdocs: pip3 install mkdocs Alternativeley, without Homebrew, you can use the depreceated but preinstalled easy_install tool to install pip: Run sudo easy_install pip to install pip Update pip with sudo pip install --upgrade pip Run sudo pip install mkdocs to install mkdocs","title":"MacOS"},{"location":"documentation/#linuxbsd","text":"Also Linux/*BSD comes pre installed with python. Most distributions also deliver pip by default. If its not installed you may need to figure out how to install pip3 through the package manager of your system. Install pip3 with these commands according to distributions: Ubuntu/Mint : apt install python3-pip Fedora/CentOS : sudo dnf install python3-pip Arch/Manjaro : sudo pacman -S python-pip openSuse : sudo zypper install python-pip *BSD : You are already advanced enough to know how you can force the bits on your disk to become pip by meditating upon it. Run pip3 install mkdocs to install mkdocs only for the current user, or run sudo pip3 install mkdocs to install mkdocs systemwide. Last one has the higher chance to work properly.","title":"Linux/*BSD"},{"location":"documentation/#update","text":"Sometimes mkdocs changes the way how to serve, or the syntax will differ. This is why you should make sure to always run the latest version of mkdocs. To ensure this simply run pip3 install --upgrade mkdocs or sudo pip3 install --upgrade mkdocs if you installed pip system wide on a linux/bsd system.","title":"Update"},{"location":"documentation/#using-mkdocs","text":"In order to extend this documentation you have to clone it from its git repository . When you cloned it, you will find a mkdocs.yml file, and a docs directory inside. The yaml file is the config file while in the directory docs the documentation files are stored. here is a guide about how to use mkdocs.","title":"Using mkdocs"},{"location":"documentation/#write-and-deploy","text":"If you are writing a documentation page, and want a live preview of it you can enter the root directory of this documentation project, and then run mkdocs serve this will start the mkdocs internal webserver on port 8000 . So all you have to do is type localhost:8000 into the addressbar of your browser, and here you go. If you modify a file, and save it, mkdocs will reload the page and show you the new content. If you want to deploy the page, so it will be up to date at the github pages simply type mkdocs gh-deploy . However please be aware that this will not push your changes to the master branch of the repository. So you still have to commit and push your changes to the actual git repository of this documentation.","title":"Write and Deploy"}]}